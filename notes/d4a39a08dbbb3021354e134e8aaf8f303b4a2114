9   Exercises

    1. 0R In [https://www.nltk.org/book/ch11.html#code-add-cv-field]5.1
       the new field appeared at the bottom of the entry. Modify this
       program so that it inserts the new subelement right after the lx
       field. (Hint: create the new cv field using Element('cv'), assign a
       text value to it, then use the insert() method of the parent
       element.)
    2. 0R Write a function that deletes a specified field from a lexical
       entry. (We could use this to sanitize our lexical data before
       giving it to others, e.g. by removing fields containing irrelevant
       or uncertain content.)
    3. 0R Write a program that scans an HTML dictionary file to find
       entries having an illegal part-of-speech field, and reports the
       headword for each entry.
    4. 0R Write a program to find any parts of speech (ps field) that
       occurred less than ten times. Perhaps these are typing mistakes?
    5. 0R We saw a method for discovering cases of whole-word
       reduplication. Write a function to find words that may contain
       partial reduplication. Use the re.search() method, and the
       following regular expression: (..+)\1
    6. 0R We saw a method for adding a cv field. There is an interesting
       issue with keeping this up-to-date when someone modifies the
       content of the lx field on which it is based. Write a version of
       this program to add a cv field, replacing any existing cv field.
    7. 0R Write a function to add a new field syl which gives a count of
       the number of syllables in the word.
    8. 0R Write a function which displays the complete entry for a lexeme.
       When the lexeme is incorrectly spelled it should display the entry
       for the most similarly spelled lexeme.
    9. 0R Write a function that takes a lexicon and finds which pairs of
       consecutive fields are most frequent (e.g. ps is often followed by
       pt). (This might help us to discover some of the structure of a
       lexical entry.)
   10. 0R Create a spreadsheet using office software, containing one
       lexical entry per row, consisting of a headword, a part of speech,
       and a gloss. Save the spreadsheet in CSV format. Write Python code
       to read the CSV file and print it in Toolbox format, using lx for
       the headword, ps for the part of speech, and gl for the gloss.
   11. 0R Index the words of Shakespeare's plays, with the help of
       nltk.Index. The resulting data structure should permit lookup on
       individual words such as music, returning a list of references to
       acts, scenes and speeches, of the form [(3, 2, 9), (5, 1, 23),
       ...], where (3, 2, 9) indicates Act 3 Scene 2 Speech 9.
   12. 0R Construct a conditional frequency distribution which records the
       word length for each speech in The Merchant of Venice, conditioned
       on the name of the character, e.g. cfd['PORTIA'][12] would give us
       the number of speeches by Portia consisting of 12 words.
   13. * Obtain a comparative wordlist in CSV format, and write a program
       that prints those cognates having an edit-distance of at least
       three from each other.
   14. * Build an index of those lexemes which appear in example
       sentences. Suppose the lexeme for a given entry is w. Then add a
       single cross-reference field xrf to this entry, referencing the
       headwords of other entries having example sentences containing w.
       Do this for all entries and save the result as a toolbox-format
       file.
   15. 0R Write a recursive function to produce an XML representation for
       a tree, with non-terminals represented as XML elements, and leaves
       represented as text content, e.g.:
<S>
  <NP type="SBJ">
    <NP>
      <NNP>Pierre</NNP>
      <NNP>Vinken</NNP>
    </NP>
    <COMMA>,</COMMA>

   About this document...

   UPDATED FOR NLTK 3.0. This is a chapter from Natural Language
   Processing with Python, by [http://stevenbird.net/]Steven Bird,
   [http://homepages.inf.ed.ac.uk/ewan/]Ewan Klein and
   [http://ed.loper.org/]Edward Loper, Copyright © 2019 the authors. It is
   distributed with the Natural Language Toolkit [http://nltk.org/],
   Version 3.0, under the terms of the Creative Commons
   Attribution-Noncommercial-No Derivative Works 3.0 United States License
   [[http://creativecommons.org/licenses/by-nc-nd/3.0/us/]http://creativec
   ommons.org/licenses/by-nc-nd/3.0/us/].

   This document was built on Wed 4 Sep 2019 11:40:48 ACST
